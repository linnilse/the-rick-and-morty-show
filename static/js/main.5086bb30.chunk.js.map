{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["request","require","API_URL","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","characters","character","showModal","loding","event","target","currentTarget","setState","id","_this2","get","then","response","console","log","data","_this3","characterResult","results","mapcharacterResult","map","result","handleRequest","_this4","react_default","a","createElement","style","textAlign","alt","src","key","className","onClick","showOnecharacter","bind","image","name","date","slice","getdate","created","status","gender","species","origin","location","App_Header","App_Modal","handleCloseModal","Component","Header","Modal","_this$props","overlayStyles","modalStyles","float","backgroundColor","borderRadius","maxWidth","minHeight","margin","padding","color","position","zIndex","left","top","width","height","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8PAEMA,SAAUC,EAAQ,KAClBC,EAAU,iDAgIDC,cAhHb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,WAAY,GACZC,UAAW,GACXC,WAAW,EACXC,QAAQ,GAPOX,gFAWFY,GACXA,EAAMC,SAAWD,EAAME,eAG3BX,KAAKY,SAAS,CACZL,WAAW,6CAIEM,EAAIJ,GAAO,IAAAK,EAAAd,KAC1BR,EAAQuB,IAAIrB,EAAUmB,GACnBG,KAAK,SAAAC,GACJC,QAAQC,IAAIF,EAASG,MAGrBN,EAAKF,SAAS,CACZL,WAAW,EACXD,UAAWW,EAASG,iDAKZ,IAAAC,EAAArB,KAEdA,KAAKY,SAAS,CACZJ,QAAQ,IAGVhB,EAAQuB,IAAIrB,GACTsB,KAAK,SAAAC,GACJ,IAAMK,EAAkBL,EAASG,KAAKG,QACtCL,QAAQC,IAAIG,GACZ,IAAME,EAAqBF,EAAgBG,IAAI,SAACC,GAE9C,OADAR,QAAQC,IAAIO,GACLA,IAGTL,EAAKT,SAAS,CACZP,WAAYmB,EACZhB,QAAQ,kDAMdR,KAAK2B,iDAGE,IAAAC,EAAA5B,KAEP,GAAIA,KAAKI,MAAMI,OACb,OACEqB,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,UAAW,WACvBJ,EAAAC,EAAAC,cAAA,OAAKG,IAAI,UAAUC,IAAI,0EAI7B,IAAM7B,EAAYN,KAAKI,MAAME,UACvBD,EAAaL,KAAKI,MAAMC,WAC3BoB,IAAI,SAACnB,GAAD,OACHuB,EAAAC,EAAAC,cAAA,OAAKK,IAAK9B,EAAUO,GAAIwB,UAAU,aAAaC,QAASV,EAAKW,iBAAiBC,KAAKZ,EAAMtB,EAAUO,KACjGgB,EAAAC,EAAAC,cAAA,OAAKM,UAAU,iBACbR,EAAAC,EAAAC,cAAA,OAAKG,IAAI,GAAGC,IAAK7B,EAAUmC,QAC3BZ,EAAAC,EAAAC,cAAA,OAAKM,UAAU,cACbR,EAAAC,EAAAC,cAAA,UAAKzB,EAAUoC,MACfb,EAAAC,EAAAC,cAAA,gBAAQzB,EAAUO,GAAlB,eA1Fd,SAAiB8B,GAEf,OADAA,EAAOA,EAAKC,MAAM,EAAG,IAEnB,IAAK,OACHD,EAAO,cAKX,OAAOA,EAiFuCE,CAAQvC,EAAUwC,YAGxDjB,EAAAC,EAAAC,cAAA,SAAOM,UAAU,gBACfR,EAAAC,EAAAC,cAAA,cAAKF,EAAAC,EAAAC,cAAA,qBAAL,IAAsBF,EAAAC,EAAAC,cAAA,MAAIM,UAAU,iBAAiB/B,EAAUyC,SAC/DlB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,sBAAiBF,EAAAC,EAAAC,cAAA,MAAIM,UAAU,iBAAiB/B,EAAU0C,SAC9DnB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,uBAAkBF,EAAAC,EAAAC,cAAA,MAAIM,UAAU,iBAAiB/B,EAAU2C,UAC/DpB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,sBAAiBF,EAAAC,EAAAC,cAAA,MAAIM,UAAU,iBAAiB/B,EAAU4C,OAAOR,OACrEb,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,6BAAwBF,EAAAC,EAAAC,cAAA,MAAIM,UAAU,iBAAiB/B,EAAU6C,SAAST,WAItF,OACEb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqB,EAAD,MACCpD,KAAKI,MAAMG,WACVsB,EAAAC,EAAAC,cAACsB,EAAD,CACEC,iBAAkBtD,KAAKsD,iBAAiBd,KAAKxC,MAC7Ca,GAAIP,EAAUO,GACd6B,KAAMpC,EAAUoC,KAChBK,OAAQzC,EAAUyC,OAClBC,OAAQ1C,EAAU0C,OAClBE,OAAQ5C,EAAU4C,OAAOR,KACzBD,MAAOnC,EAAUmC,MACjBQ,QAAS3C,EAAU2C,QACnBE,SAAU7C,EAAU6C,SAAST,KAC7BI,QAASxC,EAAUwC,QAAQF,MAAM,EAAG,KAExCf,EAAAC,EAAAC,cAAA,OAAKM,UAAU,aACZhC,WA1GOkD,aAmHZC,mLAGF,OACE3B,EAAAC,EAAAC,cAAA,UAAQM,UAAU,UAChBR,EAAAC,EAAAC,cAAA,6CALawB,aAafE,mLACK,IAAAC,EACyE1D,KAAKJ,MAA7EiB,EADD6C,EACC7C,GAAI6B,EADLgB,EACKhB,KAAMM,EADXU,EACWV,OAAQD,EADnBW,EACmBX,OAAQG,EAD3BQ,EAC2BR,OAAQT,EADnCiB,EACmCjB,MAAOQ,EAD1CS,EAC0CT,QAASE,EADnDO,EACmDP,SAAUL,EAD7DY,EAC6DZ,QAEpE,OACEjB,EAAAC,EAAAC,cAAA,OAAKO,QAAStC,KAAKJ,MAAM0D,iBAAiBd,KAAKxC,MAAOgC,MAAO2B,GAC3D9B,EAAAC,EAAAC,cAAA,OAAKC,MAAO4B,GACV/B,EAAAC,EAAAC,cAAA,UAAQC,MAAO,CAAE6B,MAAO,SAAWvB,QAAStC,KAAKJ,MAAM0D,iBAAiBd,KAAKxC,OAA7E,SACA6B,EAAAC,EAAAC,cAAA,OAAKG,IAAI,GAAGC,IAAKM,IACjBZ,EAAAC,EAAAC,cAAA,gBAAQlB,EAAR,aAAsBiC,GACtBjB,EAAAC,EAAAC,cAAA,aAEEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,mBAAcF,EAAAC,EAAAC,cAAA,cAAMW,IACxBb,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,qBAAJ,IAAqBF,EAAAC,EAAAC,cAAA,UAAKgB,IAC1BlB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,sBAAiBF,EAAAC,EAAAC,cAAA,UAAKiB,IAC1BnB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,sBAAJ,IAAsBF,EAAAC,EAAAC,cAAA,UAAKkB,IAC3BpB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,qBAAJ,IAAqBF,EAAAC,EAAAC,cAAA,UAAKmB,IAC1BrB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,4BAAJ,IAA4BF,EAAAC,EAAAC,cAAA,UAAKoB,cAjBzBI,aAyBdK,EAAc,CAClBE,gBAAiB,qBACjBC,aAAc,MACdC,SAAU,OACVC,UAAW,OACXC,OAAQ,aACRC,QAAS,OACTC,MAAO,QAEHT,EAAgB,CACpBU,SAAU,QACVC,OAAQ,EACRC,KAAM,EACNC,IAAK,EACLC,MAAO,QACPC,OAAQ,QACRZ,gBAAiB,qBC/KCa,QACW,cAA7BC,OAAOzB,SAAS0B,UAEe,UAA7BD,OAAOzB,SAAS0B,UAEhBD,OAAOzB,SAAS0B,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtE,KAAK,SAAAuE,GACjCA,EAAaC","file":"static/js/main.5086bb30.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nconst request = require('axios');\nconst API_URL = 'https://rickandmortyapi.com/api/character/'\n\nfunction getdate(date) {\n  date = date.slice(0, 4)\n  switch (date) {\n    case '2017':\n      date = '2 years ago'\n      break;\n    default:\n      break;\n  }\n  return date\n}\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      characters: [],\n      character: [],\n      showModal: false,\n      loding: true,\n    };\n  }\n\n  handleCloseModal(event) {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n    this.setState({\n      showModal: false,\n    });\n  }\n\n  showOnecharacter(id, event) {\n    request.get(API_URL + id)\n      .then(response => {\n        console.log(response.data)\n\n\n        this.setState({\n          showModal: true,\n          character: response.data\n        })\n      })\n  }\n\n  handleRequest() {\n\n    this.setState({\n      loding: true\n\n    })\n    request.get(API_URL)\n      .then(response => {\n        const characterResult = response.data.results\n        console.log(characterResult)\n        const mapcharacterResult = characterResult.map((result) => {\n          console.log(result)\n          return result\n\n        })\n        this.setState({\n          characters: mapcharacterResult,\n          loding: false\n\n        })\n      });\n  }\n  componentDidMount() {\n    this.handleRequest()\n  }\n\n  render() {\n\n    if (this.state.loding) {\n      return (\n        <div style={{ textAlign: 'center' }}>\n          <img alt=\"spinner\" src=\"https://upload.wikimedia.org/wikipedia/commons/b/b1/Loading_icon.gif\" />\n        </div>\n      )\n    }\n    const character = this.state.character\n    const characters = this.state.characters\n      .map((character) => (\n        <div key={character.id} className=\"wrappInner\" onClick={this.showOnecharacter.bind(this, character.id)}>\n          <div className=\"nameImgHolder\">\n            <img alt=\"\" src={character.image} />\n            <div className=\"nameHolder\">\n              <h2>{character.name}</h2>\n              <p>Id: {character.id} - Created: {getdate(character.created)}</p>\n            </div>\n          </div>\n          <tabel className=\"caracterStat\">\n            <tr> <td>Status:</td> <td className=\"caracterValue\">{character.status}</td></tr>\n            <tr><td>Gender: </td><td className=\"caracterValue\">{character.gender}</td></tr>\n            <tr><td>Species: </td><td className=\"caracterValue\">{character.species}</td></tr>\n            <tr><td>Origin: </td><td className=\"caracterValue\">{character.origin.name}</td></tr>\n            <tr><td>Last location: </td><td className=\"caracterValue\">{character.location.name}</td></tr>\n          </tabel>\n        </div>\n      ))\n    return (\n      <div>\n        <Header />\n        {this.state.showModal && (\n          <Modal\n            handleCloseModal={this.handleCloseModal.bind(this)}\n            id={character.id}\n            name={character.name}\n            status={character.status}\n            gender={character.gender}\n            origin={character.origin.name}\n            image={character.image}\n            species={character.species}\n            location={character.location.name}\n            created={character.created.slice(0, 4)}\n          />)}\n        <div className=\"wrappFlex\">\n          {characters}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n\nclass Header extends Component {\n\n  render() {\n    return (\n      <header className=\"header\">\n        <h1>THE RICK AND MORTY SHOW</h1>\n      </header>\n\n    )\n  }\n\n}\n\nclass Modal extends Component {\n  render() {\n    const { id, name, gender, status, origin, image, species, location, created } = this.props\n\n    return (\n      <div onClick={this.props.handleCloseModal.bind(this)} style={overlayStyles}>\n        <div style={modalStyles}>\n          <button style={{ float: 'right' }} onClick={this.props.handleCloseModal.bind(this)}>Close</button>\n          <img alt=\"\" src={image} />\n          <p>Id: {id} Created: {created}</p>\n          <tabel>\n\n            <tr><td>Name:</td><td> {name}</td></tr>\n            <tr><td>Status:</td> <td>{status}</td></tr>\n            <tr><td>Gender: </td><td>{gender}</td></tr>\n            <tr><td>Species:</td> <td>{species}</td></tr>\n            <tr><td>Origin:</td> <td>{origin}</td></tr>\n            <tr><td>Last location:</td> <td>{location}</td></tr>\n          </tabel>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst modalStyles = {\n  backgroundColor: 'rgb(0, 0, 0, 0.65)',\n  borderRadius: '5px',\n  maxWidth: '70vw',\n  minHeight: '70vh',\n  margin: ' 10px auto',\n  padding: '30px',\n  color: '#fff',\n};\nconst overlayStyles = {\n  position: 'fixed',\n  zIndex: 1,\n  left: 0,\n  top: 0,\n  width: '100vw',\n  height: '100vh',\n  backgroundColor: 'rgb(0, 0, 0, 0.3)',\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}